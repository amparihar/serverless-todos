Resources:
  jwtAccessTokenGeneratorLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
          -
            PolicyName: allowcwlogs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "logs:*"
                  Resource: "*"

  jwtAccessTokenGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const response = require("cfn-response");
          const crypto = require("crypto");
          exports.handler = (event, context) =>{
            const str = crypto.randomBytes(64).toString("hex");
            const responseData = {token: str};
            response.send(event, context, response.SUCCESS, responseData);
          };
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 20
      Role: !GetAtt jwtAccessTokenGeneratorLambdaRole.Arn

  jwtAccessToken:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 16
      ServiceToken: !GetAtt jwtAccessTokenGeneratorLambda.Arn

  # jwtAccessTokenSSMParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: /${self:provider.stage}/serverless/todos/jwt/accessToken
  #     Type: String
  #     Description: access token for todos serverless stack
  #     Value: !GetAtt jwtAccessToken.token
